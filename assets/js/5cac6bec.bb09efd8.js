"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7327],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(c,".").concat(d)]||u[d]||b[d]||s;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8922:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const s={id:"betterer.betterertestconstraint",title:"BettererTestConstraint",sidebar_label:"BettererTestConstraint",slug:"/betterer.betterertestconstraint"},o=void 0,i={unversionedId:"api/betterer.betterertestconstraint",id:"api/betterer.betterertestconstraint",title:"BettererTestConstraint",description:"API &gt; @betterer/betterer &gt; BettererTestConstraint",source:"@site/docs/api/betterer.betterertestconstraint.md",sourceDirName:"api",slug:"/betterer.betterertestconstraint",permalink:"/betterer/docs/betterer.betterertestconstraint",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/betterer.betterertestconstraint.md",tags:[],version:"current",frontMatter:{id:"betterer.betterertestconstraint",title:"BettererTestConstraint",sidebar_label:"BettererTestConstraint",slug:"/betterer.betterertestconstraint"}},c={},l=[{value:"Signature",id:"signature",level:2},{value:"References",id:"references",level:2},{value:"Example",id:"example",level:2}],p={toc:l},u="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer"},"@betterer/betterer")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterertestconstraint"},"BettererTestConstraint")),(0,a.kt)("p",null,"A function that checks if a test result is ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/constraints.bettererconstraintresult"},(0,a.kt)("inlineCode",{parentName:"a"},"better"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"worse"),", or the ",(0,a.kt)("inlineCode",{parentName:"a"},"same"))," than the expected result."),(0,a.kt)("h2",{id:"signature"},"Signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare type BettererTestConstraint<DeserialisedType> = (result: DeserialisedType, expected: DeserialisedType) => MaybeAsync<BettererConstraintResult>;\n")),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/constraints.bettererconstraintresult"},"BettererConstraintResult")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BettererConstraintResult } from '@betterer/constraints';\n\nexport function bigger(result: number, expected: number): BettererConstraintResult {\n  if (result === expected) {\n    return BettererConstraintResult.same;\n  }\n if (result > expected) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.worse;\n}\n")))}b.isMDXComponent=!0}}]);