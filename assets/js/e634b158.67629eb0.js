"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1825],{7039:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2021/11/13/betterer-v5.0.0","metadata":{"permalink":"/betterer/blog/2021/11/13/betterer-v5.0.0","editUrl":"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2021-11-13-betterer-v5.0.0.md","source":"@site/blog/2021-11-13-betterer-v5.0.0.md","title":"Betterer v5.0.0 \u2600\ufe0f","description":"Oof, this one feels like it\'s been a while coming, but after a whole bunch of work, and a whole bunch of breaking changes I\'ve just released v5.0.0 of Betterer! \ud83c\udf89","date":"2021-11-13T00:00:00.000Z","formattedDate":"November 13, 2021","tags":[],"readingTime":6.04,"hasTruncateMarker":false,"authors":[{"name":"Craig Spence","url":"http://twitter.com/phenomnominal"}],"frontMatter":{"title":"Betterer v5.0.0 \u2600\ufe0f","author":"Craig Spence","authorURL":"http://twitter.com/phenomnominal","authorTwitter":"phenomnominal"},"nextItem":{"title":"Incrementally adding Stylelint rules with Betterer \u2600\ufe0f","permalink":"/betterer/blog/2021/03/01/betterer-and-stylelint"}},"content":"Oof, this one feels like it\'s been a while coming, but after a whole bunch of work, and a whole bunch of breaking changes **I\'ve just released** [**v5.0.0**](https://www.npmjs.com/package/@betterer/cli) **of** [**Betterer!**](https://phenomnomnominal.github.io/betterer/) \ud83c\udf89\\n\\n## What is **Betterer**?\\n\\n[**Betterer**](https://phenomnomnominal.github.io/betterer/) is a test runner that helps make incremental improvements to your code!\\n\\nThe first time **Betterer** it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse \u274c), or update the snapshot (if the test got better \u2705). That\'s pretty much it!\\n\\nYou can check out the (newly updated!) documentation at [https://phenomnomnominal.github.io/betterer/](https://phenomnomnominal.github.io/betterer/)\\n\\n## What happened to v2, v3, v4...?\\n\\n\\"But Craig\\", I hear you say, \\"The [last time you posted about **Betterer**](https://dev.to/phenomnominal/betterer-v1-0-0-301b), it was at v1.0.0!? What\'s been going on?!\\". \ud83d\udd25\ud83d\udd25\ud83d\udd25\\n\\nThat\'s very astute of you dear reader, and let\'s just put it this way - I sure do love breaking APIs! One of the interesting things about **Betterer** is that it is a tool designed for problems that emerge in large and old codebases. That means it has to be able to handle large and old codebases from the get go! So I\'ve had a lot of fun as I\'ve tried to figure out the best workflows and APIs for using **Betterer**.\\n\\nBetween v1.0.0 and now, I\'ve released a bunch of features, consolidated and simplified APIs, and just generally made **Betterer** more usable and flexible. I\'m pretty happy with where it is at now, so I figured it was about time for an update. I\'ve even been talking about it at a few conferences now that they\'re coming back! What a world \ud83c\udf0d!\\n\\n## What\'s in v5.0.0?\\n\\n### Parallel tests:\\n\\nPerformance is hard. Prior to v5, the default **Betterer** reporter would struggle pretty badly, especially when lots of tests were running and producing lots of issues. That was because the main thread was responsible for updating the reporter output _and_ running all the tests.\\n\\nTo fix this, **Betterer** will now execute all your tests using [Node.js Worker Threads](https://nodejs.org/api/worker_threads.html)! That frees up the main thread to focus on rendering and also means that multiple tests can run at the same time. Getting this to work required breaking some APIs, so your [test definition file](https://phenomnomnominal.github.io/betterer/docs/test-definition-file) needs to change:\\n\\n#### Before:\\n\\n```typescript\\n// .betterer.ts\\nimport { BettererTest } from \'@betterer/betterer\';\\n\\nexport default {\\n  \'my test\': new BettererTest({\\n    // ... test config\\n  }),\\n  \'my other test\': new BettererTest({\\n    // ... test config\\n  })\\n};\\n```\\n\\n#### After:\\n\\n```typescript\\n// .betterer.ts\\nimport { BettererTest } from \'@betterer/betterer\';\\n\\nexport default {\\n  \'my test\': () =>\\n    new BettererTest({\\n      // ... test config\\n    }),\\n  \'my other test\': () =>\\n    new BettererTest({\\n      // ... test config\\n    })\\n};\\n```\\n\\nBut never fear, you can use the `betterer upgrade` command to do this migration for you! Just running `betterer upgrade` will show you what the migration will look like, and `betterer upgrade --save` will actually update your files. Easy \u2728. The `betterer upgrade` command will be used in the future when I (most probably) break more stuff.\\n\\nCheck out the **beast** of a PR [here](https://github.com/phenomnomnominal/betterer/pull/815) (and yes, it took me three branches to get it right \ud83d\ude05)\\n\\n---\\n\\n### **Betterer** \u2764\ufe0f **Angular**:\\n\\nI\'ve published a new **Betterer** test for incrementally adding [**Angular** compiler configuration](https://angular.io/guide/angular-compiler-options) to a project! I\'m pretty excited by this, as there are a lot of _big_ Angular codebases out there that don\'t utilise the full power of the Angular compiler. In particular, I think **Betterer** could be a good way to introduce the [`strictTemplates`](https://angular.io/guide/template-typecheck#strict-mode) option. You can now do that with the following:\\n\\n```typescript\\n//.betterer.ts\\nimport { angular } from \'@betterer/angular\';\\n\\nexport default {\\n  \'strict templates\': () =>\\n    angular(\'./tsconfig.json\', {\\n      strictTemplates: true\\n    }).include(\'./src/**/*.ts\', \'./src/**/*.html\')\\n};\\n```\\n\\nExpect to see a full post detailing this in the near future!\\n\\n---\\n\\n### Simpler `BettererFileTest`:\\n\\nThe old `BettererFileTest` API was a bit clunky and confusing due to the `BettererFileResolver` thing. I\'ve hidden that away in the internals, so now the public API is less clunky and confusing:\\n\\n#### Before:\\n\\n```typescript\\nimport { BettererFileResolver, BettererFileTest } from \'@betterer/betterer\';\\n\\nfunction myFileTest() {\\n  const resolver = new BettererFileResolver();\\n  return new BettererFileTest(resolver, async (filePaths, fileTestResult) => {\\n    // test implementation...\\n  });\\n}\\n```\\n\\n#### After:\\n\\n```typescript\\nimport { BettererFileTest } from \'@betterer/betterer\';\\n\\nfunction myFileTest() {\\n  return new BettererFileTest(async (filePaths, fileTestResult, resolver) => {\\n    // test implementation...\\n  });\\n}\\n```\\n\\nSmaller public API, less magic, and you only have to use it if you know why, choice! \ud83d\udc4d\\n\\n---\\n\\n### Improved workflow:\\n\\nI\'m still working on figuring out the ideal **Betterer** workflow. For now, I recommend running **Betterer** in [Pre-commit mode](https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode) as a pre-commit hook (perhaps using [husky](https://typicode.github.io/husky) and [lint-staged](https://github.com/okonet/lint-staged)) and in [CI mode](https://phenomnomnominal.github.io/betterer/docs/running-betterer#ci-mode) on your build server.\\n\\nBut one thing about **chonky** codebases is that they often have _lots_ of contributors! Lots of contributors making changes (and making things better) means that \ud83d\udc7b _merge_ _conflicts_ \ud83d\udc7b in the [results file](https://phenomnomnominal.github.io/betterer/docs/results-file) are quite common!\\n\\nTo try to help with resolving merge conflicts, I\'ve introduced the `betterer merge` command. You can still fix merge conflicts manually, but `betterer merge` will do it for you! If you\'re as lazy as me, you can even enable `automerge` and you\'ll never have to think about merging the results file ever again (I hope, this could still be buggy \ud83d\udc1b\ud83d\ude05.\\n\\nTo enable automerge run:\\n\\n```bash\\nbetterer init --automerge\\n```\\n\\n---\\n\\n### Improved caching:\\n\\n**Betterer** got some cool (ish) [caching](https://phenomnomnominal.github.io/betterer/docs/cache) implemented in v4, but turns out caching is a hard problem (\ud83d\ude05), so it\'s [taken](https://github.com/phenomnomnominal/betterer/pull/712) [a](https://github.com/phenomnomnominal/betterer/pull/746/files) [little](https://github.com/phenomnomnominal/betterer/pull/819/files) bit to get right.\\n\\nIt works by passing the `--cache` flag when running **Betterer**:\\n\\n```bash\\nbetterer --cache\\n```\\n\\nThat will create a file something like this:\\n\\n```json\\n{\\n  \\"version\\": 2,\\n  \\"testCache\\": {\\n    \\"no hack comments\\": {\\n      \\"packages/angular/src/angular.ts\\": \\"b66de728222febdecb3cf11d3aa510b3a8a6ae0e37c0539e37787964573a56ad1b7eb6ee378a9087\\",\\n      \\"packages/angular/src/index.ts\\": \\"b66de728222febdecb3cf11d3aa510b3a8a6ae0eb9494122f82a750085fc20d2c3b0f14b34897431\\",\\n      \\"packages/betterer/src/betterer.ts\\": \\"b66de728222febdecb3cf11d3aa510b3a8a6ae0e94efcd2f99a4cf14222c400693335ac1b94696bb\\"\\n      // ...\\n    }\\n  }\\n}\\n```\\n\\n**Betterer** will use this cache to only re-test files that have actually changes, so it can be _much_ faster (useful for running on [pre-commit](https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode)!) I suspect there are still issues here, so please try it out and create issues. \ud83d\ude4c\\n\\n---\\n\\n### Bug fixes and improvements:\\n\\n- [`betterer results`](https://github.com/phenomnomnominal/betterer/pull/828/files) command to get a quick summary:\\n\\n![An example of Betterer\'s results summary output](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png)\\n\\n- [Negative filters](https://github.com/phenomnomnominal/betterer/issues/831). I already suspect I\'ll regret this, but you can now use `\\"!\\"` at the start of a filter to negate it. Now `--filter myTest` will just run `\\"myTest\\"`, and `--filter !myTest` will run every other test.\\n\\n- Rewrote most of the [public API docs](https://phenomnomnominal.github.io/betterer/docs/index). These are now generated from the code, so should _hopefully_ be easier to keep up to date. \ud83e\udd1e\\n\\n- Removed a bunch of stuff from the public API. This means more consistency, and I\'ll be less likely to accidentally break stuff in the future. \ud83d\ude07\\n\\n---\\n\\n## Thanks \u2764\ufe0f\\n\\nHuge thanks to everyone who has helped me with this stuff, if you\'ve read my [rambling, cryptic tweets](https://twitter.com/phenomnominal/status/1453511720098541569), opened [issues on Github](https://github.com/phenomnomnominal/betterer), chatted to me about **Betterer** at conferences, it\'s all meant a lot! Maybe I\'ll print some stickers or something? \u2600\ufe0f\\n\\nLove \ud83e\udd70 this? Hate \ud83e\udd2c this? Go off in the comments, DM me on Twitter, or be the **third** person to join the [**Betterer** Discord](https://discord.com/invite/YNgtXt6QVX). Catch you on the line \ud83d\udcbb!"},{"id":"/2021/03/01/betterer-and-stylelint","metadata":{"permalink":"/betterer/blog/2021/03/01/betterer-and-stylelint","editUrl":"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2021-03-01-betterer-and-stylelint.md","source":"@site/blog/2021-03-01-betterer-and-stylelint.md","title":"Incrementally adding Stylelint rules with Betterer \u2600\ufe0f","description":"I just released v4.0.0 of Betterer \ud83c\udf89 (now with sweet new docs!) and it has a bunch of simplified APIs for writing tests. And just before I shipped it, I got an issue asking how to write a Stylelint test, so let\'s do it here and explain it line by line:","date":"2021-03-01T00:00:00.000Z","formattedDate":"March 1, 2021","tags":[],"readingTime":5.56,"hasTruncateMarker":false,"authors":[{"name":"Craig Spence","url":"http://twitter.com/phenomnominal"}],"frontMatter":{"title":"Incrementally adding Stylelint rules with Betterer \u2600\ufe0f","author":"Craig Spence","authorURL":"http://twitter.com/phenomnominal","authorTwitter":"phenomnominal"},"prevItem":{"title":"Betterer v5.0.0 \u2600\ufe0f","permalink":"/betterer/blog/2021/11/13/betterer-v5.0.0"},"nextItem":{"title":"Improving accessibility with Betterer \u2600\ufe0f","permalink":"/betterer/blog/2020/05/15/improving-accessibility-with-betterer"}},"content":"I just released [v4.0.0 of **Betterer**](https://github.com/phenomnomnominal/betterer) \ud83c\udf89 (now with [sweet new docs!](https://phenomnomnominal.github.io/betterer/)) and it has a bunch of simplified APIs for writing [tests](https://phenomnomnominal.github.io/betterer/docs/betterer-file-test). And just before I shipped it, I got [an issue](https://github.com/phenomnomnominal/betterer/issues/519) asking how to write a [**Stylelint**](https://stylelint.io/) test, so let\'s do it here and explain it line by line:\\n\\n## TL;DR;\\n\\nHere\'s the full test:\\n\\n```typescript\\n// stylelint.ts\\nimport { BettererFileTest } from \'@betterer/betterer\';\\nimport { promises as fs } from \'node:fs\';\\nimport { Configuration, lint } from \'stylelint\';\\n\\nexport function stylelint(configOverrides: Partial<Configuration> = {}) {\\n  return new BettererFileTest(async (filePaths, fileTestResult) => {\\n    const result = await lint({\\n      files: [...filePaths],\\n      configOverrides\\n    });\\n\\n    await Promise.all(\\n      result.results.map(async (result) => {\\n        const contents = await fs.readFile(result.source, \'utf8\');\\n        const file = fileTestResult.addFile(result.source, contents);\\n        result.warnings.forEach((warning) => {\\n          const { line, column, text } = warning;\\n          file.addIssue(line - 1, column - 1, line - 1, column - 1, text, text);\\n        });\\n      })\\n    );\\n  });\\n}\\n```\\n\\nAnd then using the test:\\n\\n```typescript\\n// .betterer.ts\\nimport { stylelint } from \'./stylelint\';\\n\\nexport default {\\n  \'no stylelint issues\': stylelint({\\n    rules: {\\n      \'unit-no-unknown\': true\\n    }\\n  }).include(\'./**/*.css\')\\n};\\n```\\n\\n## NTL;PR (not that long, please read \ud83d\ude02)\\n\\n### **Stylelint**\\n\\nSo how does it all work? Let\'s start with the actual **Stylelint** part.\\n\\n[**Stylelint**](https://stylelint.io/) is pretty easy to set-up. You need a `stylelintrc.json` file with configuration:\\n\\n```json\\n{\\n  \\"extends\\": \\"stylelint-config-standard\\"\\n}\\n```\\n\\nAnd then run it on your CSS files:\\n\\n```bash\\nstylelint \\"**/*.css\\"\\n```\\n\\nRunning that does the following:\\n\\n1. searches for the `stylelintrc.json` configuration file\\n2. reads the configuration\\n3. finds the valid files\\n4. runs the rules\\n5. returns the results\\n\\n**Stylelint** also has a [JS API](https://stylelint.io/user-guide/usage/node-api) which we\'re going to use:\\n\\n```typescript\\nimport { lint } from \'stylelint\';\\n\\nconst result = await lint({\\n  // ...\\n});\\n```\\n\\nWe could just run the above and it will test the current state of the files with the current configuration in `stylelintrc.json`. And that\'s great \u2728!\\n\\n### Augmenting the configuration:\\n\\nFor the **Betterer** test we want to augment the `stylelintrc.json` configuration with some extra rules... and **Stylelint** has [a really easy way](https://stylelint.io/user-guide/usage/node-api#configoverrides) to do that:\\n\\n```typescript\\nimport { Configuration, lint } from \'stylelint\';\\n\\nfunction stylelint(configOverrides: Partial<Configuration> = {}) {\\n  const result = await lint({\\n    configOverrides\\n  });\\n}\\n```\\n\\n### Passing the list of files:\\n\\n**Stylelint** also allows us to pass a specific set of files to test:\\n\\n```typescript\\nimport { Configuration, lint } from \'stylelint\';\\n\\nfunction stylelint(configOverrides: Partial<Configuration> = {}, files: Array<string>) {\\n  const result = await lint({\\n    files,\\n    configOverrides\\n  });\\n}\\n```\\n\\nSo we could call the `stylelint` function like:\\n\\n```typescript\\nstylelint(\\n  {\\n    rules: {\\n      \'unit-no-unknown\': true\\n    }\\n  },\\n  \'./**/*.css\'\\n);\\n```\\n\\nAnd that will run the **Stylelint** from the `stylelinerc.json` file, plus the `unit-no-unknown` rule, on all `.css` files! Thats most of the tricky stuff sorted \u2b50\ufe0f!\\n\\n### Hooking into **Betterer**:\\n\\nThis test needs to take advantage of all the snapshotting and diffing magic of **Betterer**, so we need to wrap it in a [test](https://phenomnomnominal.github.io/betterer/docs/tests). We want to be able to target individual files, so it specifically needs to be a [`BettererFileTest`](https://phenomnomnominal.github.io/betterer/docs/betterer-file-test). The function argument is the actual test, which is an `async` function that runs the linter.\\n\\n```typescript\\nimport { BettererFileTest } from \'@betterer/betterer\';\\nimport { Configuration, lint } from \'stylelint\';\\n\\nfunction stylelint(configOverrides: Partial<Configuration> = {}) {\\n  return new BettererFileTest(async (filePaths) => {\\n    // ...\\n  });\\n}\\n```\\n\\nEach time it runs **Betterer** will call that function with the relevant set of files, which we will pass along to **Stylelint**:\\n\\n```typescript\\nimport { BettererFileTest } from \'@betterer/betterer\';\\nimport { Configuration, lint } from \'stylelint\';\\n\\nfunction stylelint(configOverrides: Partial<Configuration> = {}) {\\n  return new BettererFileTest(async (filePaths) => {\\n    const result = await lint({\\n      files: [...filePaths],\\n      configOverrides\\n    });\\n  });\\n}\\n```\\n\\n### Adding files:\\n\\nNext thing is telling **Betterer** about all the files with issues reported by **Stylelint**. To do this we can use the `BettererFileTestResult` object, which is the second parameter of the test function:\\n\\n```typescript\\nnew BettererFileTest(resolver, async (filePaths, fileTestResult) => {\\n  // ...\\n});\\n```\\n\\nThe `result` object from **Stylelint** contains a list of `results`. For each item in that list, we need to read the file with [Node\'s `fs` module](https://nodejs.org/api/fs.html), and then call [`addFile()`](https://phenomnomnominal.github.io/betterer/docs/betterer-file-test#addfile) with the file path (`result.source`), and the contents of the file. That returns a [`BettererFile`](https://phenomnomnominal.github.io/betterer/docs/betterer-file-test#bettererfile) object:\\n\\n```typescript\\nimport { promises as fs } from \'node:fs\';\\n\\nawait Promise.all(\\n  result.results.map(async (result) => {\\n    const contents = await fs.readFile(result.source, \'utf8\');\\n    const file = fileTestResult.addFile(result.source, contents);\\n  })\\n);\\n```\\n\\n### Adding issues:\\n\\nThe last thing to do is convert from **Stylelint** warnings to **Betterer** issues. To do that we use the [`addIssue()`](https://phenomnomnominal.github.io/betterer/docs/betterer-file-test#addissue) function! In this case we will use the following overload:\\n\\n```typescript\\naddIssue(startLine: number, startCol: number, endLine: number, endCol: number, message: string, hash?: string):\\n```\\n\\n**Stylelint** only gives us the line and column for the start of the issue, so we use that as both the start position and the end position. **Betterer** expects them to be zero-indexed so we subtract `1` from both. This also means that the [VS Code extension](https://marketplace.visualstudio.com/items?itemName=Betterer.betterer-vscode) will add a diagnostic to the whole token with the issue, which is pretty handy! We also pass the text of the issue twice, once as the `message`, and a second time as the `hash`. The `hash` is used by **Betterer** to track issues as they move around within a file. **Stylelint** adds specific details to the `message` so that makes it a good enough hash for our purposes. All up, converting an issue looks like this:\\n\\n```typescript\\nresult.warnings.forEach((warning) => {\\n  const { line, column, text } = warning;\\n  file.addIssue(line - 1, column - 1, line - 1, column - 1, text, text);\\n});\\n```\\n\\n### The whole test:\\n\\nPutting that all together and you get this:\\n\\n```typescript\\n// stylelint.ts\\nimport { BettererFileTest } from \'@betterer/betterer\';\\nimport { promises as fs } from \'node:fs\';\\nimport { Configuration, lint } from \'stylelint\';\\n\\nexport function stylelint(configOverrides: Partial<Configuration> = {}) {\\n  return new BettererFileTest(async (filePaths, fileTestResult) => {\\n    const result = await lint({\\n      files: [...filePaths],\\n      configOverrides\\n    });\\n\\n    await Promise.all(\\n      result.results.map(async (result) => {\\n        const contents = await fs.readFile(result.source, \'utf8\');\\n        const file = fileTestResult.addFile(result.source, contents);\\n        result.warnings.forEach((warning) => {\\n          const { line, column, text } = warning;\\n          file.addIssue(line - 1, column - 1, line - 1, column - 1, text, text);\\n        });\\n      })\\n    );\\n  });\\n}\\n```\\n\\nAnd then we can use the test like this:\\n\\n```typescript\\n// .betterer.ts\\nimport { stylelint } from \'./stylelint\';\\n\\nexport default {\\n  \'no stylelint issues\': stylelint({\\n    rules: {\\n      \'unit-no-unknown\': true\\n    }\\n  }).include(\'./**/*.css\')\\n};\\n```\\n\\nAnd that\'s about it! The **Stylelint** API is the real MVP here, nice job to their team! \ud83d\udd25\ud83d\udd25\ud83d\udd25\\n\\nHopefully that makes sense! I\'m still pretty excited by **Betterer**, so hit me up on [Twitter](https://twitter.com/phenomnominal) if you have thoughts/feelings/ideas \ud83e\udd84"},{"id":"/2020/05/15/improving-accessibility-with-betterer","metadata":{"permalink":"/betterer/blog/2020/05/15/improving-accessibility-with-betterer","editUrl":"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2020-05-15-improving-accessibility-with-betterer.md","source":"@site/blog/2020-05-15-improving-accessibility-with-betterer.md","title":"Improving accessibility with Betterer \u2600\ufe0f","description":"So, yesterday I announced the new release of \u2600\ufe0f Betterer, thanks if you\'ve checked it out already!","date":"2020-05-15T00:00:00.000Z","formattedDate":"May 15, 2020","tags":[],"readingTime":3.74,"hasTruncateMarker":false,"authors":[{"name":"Craig Spence","url":"http://twitter.com/phenomnominal"}],"frontMatter":{"title":"Improving accessibility with Betterer \u2600\ufe0f","author":"Craig Spence","authorURL":"http://twitter.com/phenomnominal","authorTwitter":"phenomnominal"},"prevItem":{"title":"Incrementally adding Stylelint rules with Betterer \u2600\ufe0f","permalink":"/betterer/blog/2021/03/01/betterer-and-stylelint"},"nextItem":{"title":"Betterer v1.0.0 \u2600\ufe0f","permalink":"/betterer/blog/2020/05/14/betterer-v1.0.0"}},"content":"So, yesterday I announced the new release of [\u2600\ufe0f **Betterer**](https://dev.to/phenomnominal/betterer-v1-0-0-301b), thanks if you\'ve checked it out already!\\n\\nI wanted to write another post describing a different example, this time with a custom test instead of a built-in test! Let\'s take a look at how we can prevent accessibility regressions (and hopefully encourage improvements!) \ud83d\udc40\\n\\n## **Betterer** TL;DR\\n\\n[**Betterer**](https://github.com/phenomnomnominal/betterer) is a test runner that helps make incremental improvements to your code! It is based upon [**Jest**\'s snapshot testing](https://jestjs.io/docs/en/snapshot-testing), but with a twist...\\n\\n**Betterer** works in two stages. The first time it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse \u274c), or update the snapshot (if the test got better \u2705). That\'s pretty much it!\\n\\n## Our first **Betterer** test\\n\\nWriting a test with **Betterer** involves implementing two functions! More formally, we need to implement the `BettererTest` type:\\n\\n```typescript\\ntype BettererTest<ResultType> = {\\n  test: () => ResultType | Promise<ResultType>;\\n  constraint: (result: ResultType, expected: ResultType) => ResultType | Promise<ResultType>;\\n};\\n```\\n\\nSo we need to write two functions:\\n\\n- `test` - the action that needs to happen to get a result,\\n- `constraint` - the rule to apply to check if the result is _better_, _worse_ or the _same_\\n\\nWe can implement these in their own file, or straight in the `.betterer.ts` file. To keep it simple, we\'ll do the latter:\\n\\n```typescript\\n// .betterer.ts\\nexport default {\\n  \'improve accessibility\': {\\n    test: ...?,\\n    constraint: ...?\\n  }\\n};\\n```\\n\\n### Writing the test\\n\\nTo implement our test, we\'re going to use [**Puppeteer**](https://github.com/puppeteer/puppeteer) and [**Axe**](https://github.com/dequelabs/axe-core). **Puppeteer** is a tool that will run a browser and load a page. **Axe** is a set of accessibility audits that we can run over a web page. We\'re also going to use [**Axe Puppeteer**](https://github.com/dequelabs/axe-puppeteer) which makes it a bit easier to use **Axe** with **Puppeteer**.\\n\\nLucky for us, we can take the example straight from the **Axe Puppeteer** documentation! \ud83d\ude0d\\n\\nWe launch **Puppeteer**, get the `page` that it creates for us and navigate to a website. Then we execute **Axe** and get the results. Next, we close the page and the browser, before finally returning the number of violations! \ud83e\udd13\\n\\n```typescript\\nimport { AxePuppeteer } from \'axe-puppeteer\';\\nimport * as puppeteer from \'puppeteer\';\\n\\nasync function improveAccessibility() {\\n  const browser = await puppeteer.launch();\\n  const [page] = await browser.pages();\\n\\n  await page.goto(\'https://phenomnomnominal.github.io/betterer\');\\n  const results = await new AxePuppeteer(page).analyze();\\n\\n  await page.close();\\n  await browser.close();\\n\\n  return results.violations.length;\\n}\\n```\\n\\nThat\'s our test sorted!\\n\\n### Writing the constraint\\n\\nNow what about the `constraint`? Since our test returns a number, we just need to compare the two results. We want our test to improve when the result is _smaller_, so the `constraint` should look something like this:\\n\\n```typescript\\nimport { ConstraintResult } from \'@betterer/constraint\';\\n\\nfunction constraint(result: number, expected: number): ConstraintResult {\\n  if (current === previous) {\\n    return ConstraintResult.same;\\n  }\\n  if (current < previous) {\\n    return ConstraintResult.better;\\n  }\\n  return ConstraintResult.worse;\\n}\\n```\\n\\nComparing numbers is fairly common, so we can use the pre-defined `smaller` or `bigger` constraints:\\n\\n```typescript\\nimport { smaller } from \'@betterer/constraint\';\\n```\\n\\nSo I kind of lied, you can write a test with just one function! \ud83d\ude05\\n\\n### The whole thing\\n\\nPutting it all together, we have our test:\\n\\n```typescript\\n// .betterer.ts\\nimport { smaller } from \'@betterer/constraint\';\\nimport { AxePuppeteer } from \'axe-puppeteer\';\\nimport * as puppeteer from \'puppeteer\';\\n\\nexport default {\\n  \'improve accessibility\': {\\n    async test() {\\n      const browser = await puppeteer.launch();\\n      const [page] = await browser.pages();\\n\\n      await page.goto(\'https://phenomnomnominal.github.io/betterer\');\\n      const results = await new AxePuppeteer(page).analyze();\\n\\n      await page.close();\\n      await browser.close();\\n\\n      return results.violations.length;\\n    },\\n    constraint: smaller\\n  }\\n};\\n```\\n\\nHow\'s that look? Not bad I reckon! **Betterer** will run the test for us and update the test snapshot whenever the results get better. That will help make sure that our audit score only goes in the right direction.\\n\\nThis test isn\'t perfect - you may noticed that it doesn\'t matter _what_ the violations are, but _how many_ there are! That\'s something that we could improve later! For now it will stop us introducing more audit violations, which is a good start \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\\n\\nWe could improve this test by keeping track of the specific violations that occurred, so we can have a clearer definition of what _better_ or _worse_ really is, but let\'s leave that for another day!\\n\\n## That\'s it!\\n\\nThat\'s all I got for now. Please let me know what you think on [Twitter](https://twitter.com/phenomnominal)! \ud83e\udd84"},{"id":"/2020/05/14/betterer-v1.0.0","metadata":{"permalink":"/betterer/blog/2020/05/14/betterer-v1.0.0","editUrl":"https://github.com/phenomnomnominal/betterer/edit/master/website/blog/blog/2020-05-14-betterer-v1.0.0.md","source":"@site/blog/2020-05-14-betterer-v1.0.0.md","title":"Betterer v1.0.0 \u2600\ufe0f","description":"I\'m stoked to announce v1.0.0 of Betterer!","date":"2020-05-14T00:00:00.000Z","formattedDate":"May 14, 2020","tags":[],"readingTime":7.09,"hasTruncateMarker":false,"authors":[{"name":"Craig Spence","url":"http://twitter.com/phenomnominal"}],"frontMatter":{"title":"Betterer v1.0.0 \u2600\ufe0f","author":"Craig Spence","authorURL":"http://twitter.com/phenomnominal","authorTwitter":"phenomnominal"},"prevItem":{"title":"Improving accessibility with Betterer \u2600\ufe0f","permalink":"/betterer/blog/2020/05/15/improving-accessibility-with-betterer"}},"content":"I\'m stoked to announce [v1.0.0](https://www.npmjs.com/org/betterer) of [**Betterer**!](https://github.com/phenomnomnominal/betterer)\\n\\nI\'ve been locked down in New Zealand for the last little while, and I\'ve used some of that time to smash out what I think is a pretty compelling v1 release of a tool that I\'m really excited about!\\n\\n## What is **Betterer**?\\n\\n[**Betterer**](https://github.com/phenomnomnominal/betterer) is a test runner that helps make incremental improvements to your code! It is based upon [**Jest**\'s snapshot testing](https://jestjs.io/docs/en/snapshot-testing), but with a twist...\\n\\nI\'m sure many of us have been in situations where we\'ve seen big changes we\'d like to make, or new standards or design decisions that we\'d like to encourage, but we just don\'t have the time to do it.\\n\\nUsually one of two things happen:\\n\\n1. You start a long-lived branch that is awful to maintain and often impossible to merge. It ends up being a time sink \u23f1\\n\\n2. You and your team make an agreement to make the improvement over time. It gets forgotten about and nothing gets better (in fact usually it gets worse!) \ud83d\ude15\\n\\nI\'ve seen this happen time and time and again! Sometimes it\'s introducing a new style rule to a codebase. Other times it\'s enabling stricter compilation, or decreasing the number of accessibility failures!\\n\\n**Betterer** works in two stages. The first time it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse \u274c), or update the snapshot (if the test got better \u2705). That\'s pretty much it!\\n\\n## How does it work?\\n\\nTo get started, you can run the following from the root of your project:\\n\\n```bash\\nnpx @betterer/cli init\\n```\\n\\nThat will give you a brand new `.betterer.ts` config file which looks something like this:\\n\\n```typescript\\n// .betterer.ts\\n\\nexport default {\\n  // Add tests here \u2600\ufe0f\\n};\\n```\\n\\nFrom here, it\'s up to you to add some tests!\\n\\nLet\'s imagine you\'re working with a codebase that uses [**Moment.js**](https://momentjs.com/). You\'d like to migrate away from it for performance reasons.\\n\\n```javascript\\n// src/subtract.js\\nimport * as moment from \'moment\';\\n\\nconst now = moment();\\n\\nconsole.log(now.subtract(4, \'years\'));\\n```\\n\\nLet\'s also imagine that you\'re using **ESLint** in this codebase. One approach to remove **Moment.js** might be to use [the `no-restricted-imports` **ESLint** rule](https://eslint.org/docs/rules/no-restricted-imports), add the `eslint-disable-next-line` comment all over the place, and cross your fingers that people don\'t just add more... \ud83e\udd14\\n\\nBetterer gives us a better option! We can create a test for that specific rule:\\n\\n```typescript\\n// .betterer.ts\\nimport { eslintBetterer } from \'@betterer/eslint\';\\n\\nexport default {\\n  \'no import from moment\': eslintBetterer(\'./src/**/*.js\', [\\n    \'no-restricted-imports\',\\n    [\\n      \'error\',\\n      {\\n        name: \'moment\',\\n        message: \'Please use \\"date-fns\\" instead.\'\\n      }\\n    ]\\n  ])\\n};\\n```\\n\\nThe first time we run the test with **Betterer**, it will look something like this:\\n\\n![Terminal output showing Betterer running and indicating that the \\"no import from moment\\" test has run for the first time](https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/first-run.gif \'First run\')\\n\\n**Betterer** has now created a snapshot of the current state, stored by default in a `.betterer.results` file:\\n\\n```javascript\\n// BETTERER RESULTS V1.\\nexports[`no import from moment`] = {\\n  timestamp: 1589459511808,\\n  value: `{\\n    \\"src/subtract.js:566118541\\": [\\n      [0, 0, 33, \\"\\\\\'moment\\\\\' import is restricted from being used. Please use \\\\\\\\\\"date-fns\\\\\\\\\\" instead.\\", \\"4035178381\\"]\\n    ]\\n  }`\\n};\\n```\\n\\nThe snapshot contains information about the current issues in the code.\\n\\nThe next time we run the test, it will look like this:\\n\\n![Terminal output showing Betterer running and indicating that the \\"no import from moment\\" test has run and stayed the same](https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/same-run.gif \'Same run\')\\n\\nNow, someone else on the team comes along and doesn\'t know about the new rule, and they add a new file that uses **Moment.js**:\\n\\n```javascript\\n// src/add.js\\nimport * as moment from \'moment\';\\n\\nconst now = moment();\\n\\nconsole.log(now.add(4, \'years\'));\\n```\\n\\nWhen **Betterer** runs on their code, they get a nice big error:\\n\\n![Terminal output showing Betterer running and indicating that the \\"no import from moment\\" test has run and got worse](https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/worse-run.gif \'Worse run\')\\n\\nEven though a new issue has been introduced, the `.betterer.results` file doesn\'t change!\\n\\nOur teammate reads the helpful error message from **ESLint** and they update their code to use **date-fns**...\\n\\n```javascript\\n// src/add.js\\nimport { addYears } from \'date-fns\';\\n\\nconsole.log(addYears(Date.now(), 4));\\n```\\n\\n... and once again **Betterer** tells them that the result is the same:\\n\\n![Terminal output showing Betterer running and indicating that the \\"no import from moment\\" test has run and stayed the same](https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/same-run.gif \'Same run\')\\n\\nOur teammate has a bit of time on their hands, so they decide to fix up our usage of **Moment.js** as well! \ud83c\udf89\\n\\nThis time when they run **Betterer**, everything is good:\\n\\n![Terminal output showing Betterer running and indicating that the \\"no import from moment\\" test has run and got better](https://raw.githubusercontent.com/phenomnomnominal/betterer/master/docs/images/better-run.gif \'Better run\')\\n\\nThere are now no remaining issues, so this test has met its goal. Since the existing issue has been resolved, it is removed from the snapshot in the `.betterer.results` file. This means we can move the rule from **Betterer** over to the normal **ESLint** configuration, so we don\'t reintroduce the issues again.\\n\\nPretty neat eh! That\'s an example of the built-in `@betterer/eslint` test, but there are [other](https://github.com/phenomnomnominal/betterer/tree/master/packages/typescript) [built-in](https://github.com/phenomnomnominal/betterer/tree/master/packages/regexp) [tests](https://github.com/phenomnomnominal/betterer/tree/master/packages/tsquery) too. And you can of course write your own tests! Check out the [documentation for more details](https://github.com/phenomnomnominal/betterer#custom-tests) (still a WIP \ud83d\udea7)!\\n\\n## What\'s in v1.0.0?\\n\\nEverything I\'ve mentioned so far has been working for a while! Over the last few months I\'ve really solidified the implementation (basically a whole rewrite to be honest!):\\n\\n- Better error handling and error messages\\n- Better issue comparison. It now understands file renames and issues that around within the same file\\n- The ability to run tests on a single file via the JS API, with `betterer.single`\\n- A whole bunch more tests!\\n\\nBut I\'ve also added a few key features that are worthy of a 1.0.0 release! \ud83d\udd25\ud83d\udd25\ud83d\udd25\\n\\n### Force Update (!)\\n\\nFirst things first, you can now run **Betterer** with the `--update` option, and the snapshot will be updated even if it got worse! This is handy for when you need to ship something, even if it makes it temporarily worse:\\n\\n```bash\\nbetterer --update\\n```\\n\\nAnd because this is shamelessly stolen from Jest, you can also use `-u`.\\n\\n### Watch mode (!!!)\\n\\nThis one is huge! All the changes that I made were building up to this. You can now run **Betterer** in watch mode and get feedback as you fix up issues:\\n\\n![Terminal output showing Betterer running in watch mode indicating that the \\"no import from moment\\" test has run on a specific file and got better](https://dev-to-uploads.s3.amazonaws.com/i/z47lyc7qmtnnxov4ggra.gif \'Watch mode\')\\n\\nSame rules apply here, the snapshot will update whenever the test gets better!\\n\\nThere\'s a bunch of other cool things that could happen with watch mode (gamification much?), so I\'m pumped that it\'s working! \ud83e\udd29\\n\\n### VS Code extension (!!!!!)\\n\\nWay to bury the lede! This is probably the coolest bit! Let\'s just say it was a build up.\\n\\n**Betterer** runs entirely in its own world, so the usual **ESLint** or **TypeScript** extensions can\'t report the issues. But everyone loves seeing red squiggly lines in the code editor, so **Betterer** now has [its very own VS Code Extension](https://marketplace.visualstudio.com/items?itemName=Betterer.betterer-vscode) \ud83e\udd2f!\\n\\n#### Initialise in a new project\\n\\nYou can run the `betterer.init` command in a project! It will generate config files and update your `package.json` with scripts and dependencies:\\n\\n![VS Code screen capture output showing Betterer being initialised in a project](https://dev-to-uploads.s3.amazonaws.com/i/7ij09ag7q2v12pv56h5x.gif \'VS Code Extension Betterer init\')\\n\\n#### See all issues in a file\\n\\nAnd when you\'ve got some tests setup, it will show you all the existing issues in a file, and when they were first created. And it will show you any new issues as you make them:\\n\\n![VS Code screen capture output showing Betterer highlighting issues in a project](https://dev-to-uploads.s3.amazonaws.com/i/uxmtcar93enfqgx12orr.gif \'VS Code Extension Betterer issues\')\\n\\nI reckon that\'s pretty sweet!\\n\\n### So, what\'s next?\\n\\nWell, you\'re going to try out [**Betterer**](https://github.com/phenomnomnominal/betterer) and open lots of issues and help me make it better(er)! If you\'d like to contribute...\\n\\n- There are _definitely_ bugs to fix\\n- The test coverage is pretty good, but there aren\'t any E2E tests for the VS Code extension yet\\n- The logging and reporting implementation could use some work\\n- There is so much documentation to be written\\n\\nWhat a time to be alive! \ud83e\udd13\\n\\nIn case you can\'t tell, I\'m unreasonably excited about this and I really think this will help with large and legacy codebases. Please let me know what you think on the [Twitters](https://twitter.com/phenomnominal)!"}]}')}}]);