"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5346],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(b,l(l({ref:t},c),{},{components:r})):n.createElement(b,l({ref:t},c))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294),a=r(6010);const s={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,l),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>y});var n=r(7462),a=r(7294),s=r(6010),l=r(2466),i=r(6550),o=r(1980),u=r(7392),c=r(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:r}=e;const n=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,o._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,s=d(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[o,u]=b({queryString:r,groupId:n}),[p,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:n}),g=(()=>{const e=o??p;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var g=r(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:r,selectedValue:i,selectValue:o,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,r=c.indexOf(t),n=u[r].value;n!==i&&(p(t),o(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,s.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":i===t})}),r??t)})))}function T(e){let{lazy:t,children:r,selectedValue:n}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=f(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",h.tabList)},a.createElement(v,(0,n.Z)({},e,t)),a.createElement(T,(0,n.Z)({},e,t)))}function y(e){const t=(0,g.Z)();return a.createElement(k,(0,n.Z)({key:String(t)},e))}},2304:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=r(7462),a=(r(7294),r(3905)),s=r(4866),l=r(5162);const i={id:"tests",title:"Tests",sidebar_label:"Tests",slug:"/tests"},o=void 0,u={unversionedId:"tests",id:"tests",title:"Tests",description:"A Betterer test is a programmatic definition of something that you want to improve in your codebase. Typically this will either be something that is measured across the entire project (e.g. code coverage, or number of tests, or a specific performance metric), or something that is measured on a per-file basis (e.g. type checking, or linting).",source:"@site/docs/tests.md",sourceDirName:".",slug:"/tests",permalink:"/betterer/docs/tests",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/tests.md",tags:[],version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1636753986,formattedLastUpdatedAt:"Nov 12, 2021",frontMatter:{id:"tests",title:"Tests",sidebar_label:"Tests",slug:"/tests"},sidebar:"docs",previous:{title:"Test definition file",permalink:"/betterer/docs/test-definition-file"},next:{title:"Results file",permalink:"/betterer/docs/results-file"}},c={},p=[{value:"Basic test",id:"basic-test",level:2},{value:"Skipping and targeting tests",id:"skipping-and-targeting-tests",level:2},{value:"Test goal",id:"test-goal",level:2},{value:"Test deadline",id:"test-deadline",level:2},{value:"File test",id:"file-test",level:2},{value:"Complex test",id:"complex-test",level:2}],d={toc:p},m="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," test is a programmatic definition of something that you want to improve in your codebase. Typically this will either be something that is measured ",(0,a.kt)("em",{parentName:"p"},"across the entire project")," (e.g. code coverage, or number of tests, or a specific performance metric), or something that is measured ",(0,a.kt)("em",{parentName:"p"},"on a per-file basis")," (e.g. type checking, or linting)."),(0,a.kt)("p",null,"Tests are defined as code and can be re-used and shared with other projects. ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," even comes with ",(0,a.kt)("a",{parentName:"p",href:"./typescript"},"a")," ",(0,a.kt)("a",{parentName:"p",href:"./eslint"},"few")," ",(0,a.kt)("a",{parentName:"p",href:"./regexp"},"built-in")," ",(0,a.kt)("a",{parentName:"p",href:"./stylelint"},"tests"),"."),(0,a.kt)("h2",{id:"basic-test"},"Basic test"),(0,a.kt)("p",null,"The most basic test you can write checks if a number grows or shrinks:"),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller\n    })\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller\n    })\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"skipping-and-targeting-tests"},"Skipping and targeting tests"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"./betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," has nice helpers for ",(0,a.kt)("a",{parentName:"p",href:"./betterer.betterertest.skip"},"skipping")," tests and ",(0,a.kt)("a",{parentName:"p",href:"./betterer.betterertest.only"},"selecting specific tests")," to run."),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger\n    }).only(),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller\n    }).skip()\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger\n    }).only(),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller\n    }).skip()\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"test-goal"},"Test goal"),(0,a.kt)("p",null,'You can add a goal to your test, which can be a function or a value. Once the goal is met, the test will be marked as "completed":'),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger,\n      goal: (value: number) => value > 1000\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller,\n      goal: 5\n    })\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger,\n      goal: (value) => value > 1000\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller,\n      goal: 5\n    })\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"test-deadline"},"Test deadline"),(0,a.kt)("p",null,"You can add a deadline to your test, which can be a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},(0,a.kt)("inlineCode",{parentName:"a"},"Date")," object"),", or a valid ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#parameters"},(0,a.kt)("inlineCode",{parentName:"a"},"Date")," string"),'. Once the deadline is passed, the test will be marked as "expired":'),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { bigger, smaller } from '@betterer/constraints';\n\nexport default {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger,\n      deadline: new Date('2021/07/03')\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller,\n      deadline: '2021/07/03'\n    })\n};\n\nfunction getNumberOfTests(): number {\n  // ...\n}\n\nfunction getBundleSize(): number {\n  // ...\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { bigger, smaller } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should grow': () =>\n    new BettererTest({\n      test: () => getNumberOfTests(),\n      constraint: bigger,\n      deadline: new Date('2021/07/03')\n    }),\n  'should shrink': () =>\n    new BettererTest({\n      test: () => getBundleSize(),\n      constraint: smaller,\n      deadline: '2021/07/03'\n    })\n};\n\nfunction getNumberOfTests() {\n  // ...\n}\n\nfunction getBundleSize() {\n  // ...\n}\n")))),(0,a.kt)("h2",{id:"file-test"},"File test"),(0,a.kt)("p",null,"If you want to write a test that checks individual files, you can write a ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest")),":"),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererFileTest } from '@betterer/betterer';\n\nexport default {\n  'no more JavaScript files': () => countFiles('no more JavaScript files!').include('**/*.js')\n};\n\nfunction countFiles(issue: string) {\n  return new BettererFileTest(async (filePaths, fileTestResult) => {\n    filePaths.forEach((filePath) => {\n      // In this case the file contents don't matter:\n      const file = fileTestResult.addFile(filePath, '');\n      // Add the issue to the first character of the file:\n      file.addIssue(0, 0, issue);\n    });\n  });\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererFileTest } = require('@betterer/betterer');\n\nmodule.exports = {\n  'no more JavaScript': () => countFiles('no more JavaScript files!').include('**/*.js')\n};\n\nfunction countFiles(issue) {\n  return new BettererFileTest(async (filePaths, fileTestResult) => {\n    filePaths.forEach((filePath) => {\n      // In this case the file contents don't matter:\n      const file = fileTestResult.addFile(filePath, '');\n      // Add the issue to the first character of the file:\n      file.addIssue(0, 0, issue);\n    });\n  });\n}\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./betterer.bettererfiletest"},"Full ",(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest")," API"))),(0,a.kt)("h2",{id:"complex-test"},"Complex test"),(0,a.kt)("p",null,"If you want to do more fancy custom things, you can have complete control over ",(0,a.kt)("a",{parentName:"p",href:"./betterer.betterertestconstraint"},"constraints"),", ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererdiffer"},"diffing"),", ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererserialiser"},"serialising/deserialising")," and ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererprinter"},"printing"),"."),(0,a.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// .betterer.ts\nimport { BettererTest } from '@betterer/betterer';\nimport { BettererConstraintResult } from '@betterer/constraints';\n\ntype AccessibilityReport = {\n  warnings: Array<string>;\n  errors: Array<string>;\n};\n\nexport default {\n  'should be accessible': () =>\n    new BettererTest<AccessibilityReport>({\n      test: accessibilityTest,\n      constraint: accessibilityConstraint\n    })\n};\n\nfunction accessibilityTest(): AccessibilityReport {\n  // ...\n}\n\nfunction accessibilityConstraint(result: AccessibilityReport, expected: AccessibilityReport): BettererConstraintResult {\n  if (result.errors > expected.errors || result.warnings > expected.warnings) {\n    return BettererConstraintResult.worse;\n  }\n  if (result.errors < expected.errors || result.warnings < expected.warnings) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.same;\n}\n"))),(0,a.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// .betterer.js\nconst { BettererTest } = require('@betterer/betterer');\nconst { BettererConstraintResult } = require('@betterer/constraints');\n\nmodule.exports = {\n  'should be accessible': () =>\n    new BettererTest({\n      test: accessibilityTest,\n      constraint: accessibilityConstraint\n    })\n};\n\nfunction accessibilityTest() {\n  // ...\n}\n\nfunction accessibilityConstraint(result, expected) {\n  if (result.errors > expected.errors || result.warnings > expected.warnings) {\n    return BettererConstraintResult.worse;\n  }\n  if (result.errors < expected.errors || result.warnings < expected.warnings) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.same;\n}\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./betterer.betterertest"},"Full ",(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest")," API"))))}b.isMDXComponent=!0}}]);