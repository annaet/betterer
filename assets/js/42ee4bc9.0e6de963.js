"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2040],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>c});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),o=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},m=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=o(r),b=a,c=d["".concat(i,".").concat(b)]||d[b]||p[b]||l;return r?n.createElement(c,u(u({ref:t},m),{},{components:r})):n.createElement(c,u({ref:t},m))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,u=new Array(l);u[0]=b;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:a,u[1]=s;for(var o=2;o<l;o++)u[o]=r[o];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},4203:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=r(7462),a=(r(7294),r(3905));const l={id:"betterer.bettererrunsummary",title:"BettererRunSummary",sidebar_label:"BettererRunSummary",slug:"/betterer.bettererrunsummary"},u=void 0,s={unversionedId:"api/betterer.bettererrunsummary",id:"api/betterer.bettererrunsummary",title:"BettererRunSummary",description:"API &gt; @betterer/betterer &gt; BettererRunSummary",source:"@site/docs/api/betterer.bettererrunsummary.md",sourceDirName:"api",slug:"/betterer.bettererrunsummary",permalink:"/betterer/docs/betterer.bettererrunsummary",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/betterer.bettererrunsummary.md",tags:[],version:"current",frontMatter:{id:"betterer.bettererrunsummary",title:"BettererRunSummary",sidebar_label:"BettererRunSummary",slug:"/betterer.bettererrunsummary"}},i={},o=[{value:"Signature",id:"signature",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Properties",id:"properties",level:2}],m={toc:o},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer"},"@betterer/betterer")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererrunsummary"},"BettererRunSummary")),(0,a.kt)("p",null,"The summary of a ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," run. Includes everything from ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererrun"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererRun")),"."),(0,a.kt)("h2",{id:"signature"},"Signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BettererRunSummary extends BettererRun \n")),(0,a.kt)("b",null,"Extends:")," [BettererRun](/betterer/docs/betterer.bettererrun)",(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"You can get the ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererRunSummary")," via the ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererreporter"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererReporter"))," interface."),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const myReporter: BettererReporter = {\n  // Access the summary after the run has ended:\n  runEnd (runSummary: BettererRunSummary) {\n    // ...\n  }\n}\n")),(0,a.kt)("p",null,"or by using ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererreporter"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererReporter"),"'s")," Promise-based ",(0,a.kt)("inlineCode",{parentName:"p"},"lifecycle")," interface:"),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const myReporter: BettererReporter = {\n  // Access the summary after the run has ended:\n  runStart (run: BettererRun, lifecycle: Promise<BettererRunSummary>) {\n    const summary: BettererRunSummary = await lifecycle;\n    // ...\n  }\n}\n")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.delta"},"delta")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererdelta"},"BettererDelta")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The change between a test run's result and its baseline. Will be present when the test has a ",(0,a.kt)("code",null,"progress")," handler and ",(0,a.kt)("code",null,"isBetter"),", ",(0,a.kt)("code",null,"isNew"),", ",(0,a.kt)("code",null,"isSame")," or ",(0,a.kt)("code",null,"isWorse")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.diff"},"diff")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererdiff"},"BettererDiff")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The verbose diff between the current test result and the expected result. Will be present when ",(0,a.kt)("code",null,"isWorse")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.error"},"error")),(0,a.kt)("td",{parentName:"tr",align:null},"Error ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The ",(0,a.kt)("code",null,"error")," that cause the run to fail. Will be present when ",(0,a.kt)("code",null,"isFailed")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.isbetter"},"isBetter")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),', this test has become "better", based on the result of the ',(0,a.kt)("code",null,"constraint")," function. The ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/results-file"},"results file")," will be updated with the new result. If the test has met its goal, ",(0,a.kt)("code",null,"isComplete")," will also be ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.iscomplete"},"isComplete")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),", this test has successfully met its goal. ",(0,a.kt)("code",null,"isBetter")," will also be ",(0,a.kt)("code",null,"true")," the first time the test meets its goal. ",(0,a.kt)("code",null,"isSame")," will also be ",(0,a.kt)("code",null,"true")," on subsequent runs. The default reporter will show that this test has met its goal.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.isexpired"},"isExpired")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),", this test has expired because its ",(0,a.kt)("code",null,"deadline")," has passed. The default reporter will show that this test has expired.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.isfailed"},"isFailed")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),", this test has failed because the test function threw an error. The default reporter will show that this test has failed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.issame"},"isSame")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),', this test is "the same", based on the result of the ',(0,a.kt)("code",null,"constraint")," function. The ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/results-file"},"results file")," will be updated if the serialised result has changed, for example when a linting issue in a file moves to a different location in the file.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.isupdated"},"isUpdated")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),', this test is "worse", based on the result of the ',(0,a.kt)("code",null,"constraint")," function, but the ",(0,a.kt)("code",null,"--update")," option was used. The ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/results-file"},"results file")," will be updated with the new result.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.isworse"},"isWorse")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),', this test is "worse", based on the result of the ',(0,a.kt)("code",null,"constraint")," function. The ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/results-file"},"results file")," will not be updated.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.printed"},"printed")),(0,a.kt)("td",{parentName:"tr",align:null},"string ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.result"},"result")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererresult"},"BettererResult")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The result for the test run. Will be ",(0,a.kt)("code",null,"null")," when ",(0,a.kt)("code",null,"isFailed")," or ",(0,a.kt)("code",null,"isSkipped")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrunsummary.timestamp"},"timestamp")),(0,a.kt)("td",{parentName:"tr",align:null},"number"),(0,a.kt)("td",{parentName:"tr",align:null},"The time that the test started. Used for checking if a test has expired.")))))}p.isMDXComponent=!0}}]);