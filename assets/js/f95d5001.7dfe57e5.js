"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8475],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,d=c["".concat(s,".").concat(m)]||c[m]||b[m]||i;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1014:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={id:"betterer.betterersuite",title:"BettererSuite",sidebar_label:"BettererSuite",slug:"/betterer.betterersuite"},o=void 0,l={unversionedId:"api/betterer.betterersuite",id:"api/betterer.betterersuite",title:"BettererSuite",description:"API &gt; @betterer/betterer &gt; BettererSuite",source:"@site/docs/api/betterer.betterersuite.md",sourceDirName:"api",slug:"/betterer.betterersuite",permalink:"/betterer/docs/betterer.betterersuite",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/betterer.betterersuite.md",tags:[],version:"current",frontMatter:{id:"betterer.betterersuite",title:"BettererSuite",sidebar_label:"BettererSuite",slug:"/betterer.betterersuite"}},s={},p=[{value:"Signature",id:"signature",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2},{value:"Properties",id:"properties",level:2}],u={toc:p},c="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer"},"@betterer/betterer")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterersuite"},"BettererSuite")),(0,a.kt)("p",null,"A set of ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," runs. Will become a ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterersuitesummary"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererSuiteSummary"))," when the test suite is completed."),(0,a.kt)("h2",{id:"signature"},"Signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BettererSuite \n")),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"The internal implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererSuite")," is responsible for a lot more than this interface suggests, but we want to minimise the public API surface as much as possible. You can get the ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererSuite")," via the ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererreporter"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererReporter"))," interface."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const myReporter: BettererReporter = {\n  // Access the suite before any tests are run:\n  suiteStart (suite: BettererSuite) {\n    // ...\n  },\n  // Access the suite when something goes wrong:\n  suiteError (suite: BettererSuite) {\n    // ...\n  }\n}\n")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterersuite.filepaths"},"filePaths")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererfilepaths"},"BettererFilePaths")),(0,a.kt)("td",{parentName:"tr",align:null},"An array of file paths that will be tested. The file paths can be specified by the global  and  properties. Also used by watch mode to target individual files.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterersuite.runs"},"runs")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererruns"},"BettererRuns")),(0,a.kt)("td",{parentName:"tr",align:null},"An array containing a ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererRun"))," for each test in the ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/test-definition-file"},"test definition file"),".")))))}b.isMDXComponent=!0}}]);