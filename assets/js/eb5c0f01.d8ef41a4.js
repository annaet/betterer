"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6786],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,p(p({ref:t},c),{},{components:r})):n.createElement(f,p({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:a,p[1]=s;for(var l=2;l<o;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},953:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={id:"regexp-test",title:"RegExp test",slug:"/regexp-test"},p=void 0,s={unversionedId:"regexp-test",id:"regexp-test",title:"RegExp test",description:"Betterer ships several built-in tests to get you started. Check out the implementations for inspiration for your own tests!",source:"@site/docs/regexp-test.md",sourceDirName:".",slug:"/regexp-test",permalink:"/betterer/docs/regexp-test",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/regexp-test.md",tags:[],version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1636753986,formattedLastUpdatedAt:"Nov 12, 2021",frontMatter:{id:"regexp-test",title:"RegExp test",slug:"/regexp-test"},sidebar:"docs",previous:{title:"ESLint test",permalink:"/betterer/docs/eslint-test"},next:{title:"Stylelint test",permalink:"/betterer/docs/stylelint-test"}},i={},l=[{value:"<code>@betterer/regexp</code>",id:"bettererregexp",level:3}],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Betterer")," ships several built-in tests to get you started. Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer/blob/master/packages/regexp/src/regexp.ts"},"implementations")," for inspiration for your own tests!"),(0,a.kt)("h3",{id:"bettererregexp"},(0,a.kt)("a",{parentName:"h3",href:"https://www.npmjs.com/package/@betterer/regexp"},(0,a.kt)("inlineCode",{parentName:"a"},"@betterer/regexp"))),(0,a.kt)("p",null,"Use this test to incrementally remove ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},(0,a.kt)("strong",{parentName:"a"},"RegExp"))," matches from your codebase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { regexp } from '@betterer/regexp';\n\nexport default {\n  'no hack comments': () => regexp(/(\\/\\/\\s*HACK)/i).include('**/*.ts')\n};\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@betterer/regexp"},(0,a.kt)("inlineCode",{parentName:"a"},"@betterer/regexp"))," is a ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest"},"BettererFileTest"),", so you can use ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest.include"},(0,a.kt)("inlineCode",{parentName:"a"},"include")),", ",(0,a.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest.exclude"},(0,a.kt)("inlineCode",{parentName:"a"},"exclude")),", ",(0,a.kt)("a",{parentName:"p",href:"betterer.bettererfiletest.only"},(0,a.kt)("inlineCode",{parentName:"a"},"only")),", and ",(0,a.kt)("a",{parentName:"p",href:"betterer.bettererfiletest.skip"},(0,a.kt)("inlineCode",{parentName:"a"},"skip")),"."))}u.isMDXComponent=!0}}]);