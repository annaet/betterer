"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8320],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},b="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),b=p(r),c=a,m=b["".concat(s,".").concat(c)]||b[c]||d[c]||l;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[b]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6028:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const l={id:"betterer.bettererrun",title:"BettererRun",sidebar_label:"BettererRun",slug:"/betterer.bettererrun"},i=void 0,o={unversionedId:"api/betterer.bettererrun",id:"api/betterer.bettererrun",title:"BettererRun",description:"API &gt; @betterer/betterer &gt; BettererRun",source:"@site/docs/api/betterer.bettererrun.md",sourceDirName:"api",slug:"/betterer.bettererrun",permalink:"/betterer/docs/betterer.bettererrun",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/betterer.bettererrun.md",tags:[],version:"current",frontMatter:{id:"betterer.bettererrun",title:"BettererRun",sidebar_label:"BettererRun",slug:"/betterer.bettererrun"}},s={},p=[{value:"Signature",id:"signature",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2},{value:"Properties",id:"properties",level:2}],u={toc:p},b="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(b,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer"},"@betterer/betterer")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererrun"},"BettererRun")),(0,a.kt)("p",null,"A single ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," run. Will become a ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererrunsummary"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererRunSummary"))," when the test run is completed."),(0,a.kt)("h2",{id:"signature"},"Signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BettererRun \n")),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"The internal implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererRun")," is responsible for a lot more than this interface suggests, but we want to minimise the public API surface as much as possible. A set of ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererrun"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererRun"),"s")," make a ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterersuite"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererSuite")),". You can get the ",(0,a.kt)("inlineCode",{parentName:"p"},"BettererRun")," via the ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.bettererreporter"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererReporter"))," interface."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const myReporter: BettererReporter = {\n  // Access the run before any tests are run:\n  runStart (run: BettererRun) {\n    // ...\n  },\n  // Access the run when something goes wrong:\n  runError (run: BettererRun) {\n    // ...\n  }\n}\n")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.baseline"},"baseline")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererresult"},"BettererResult")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The baseline result for the test run. If the ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," gets better over the lifetime of the ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterercontext"},"BettererContext"),", ",(0,a.kt)("code",null,"baseline")," will always reflect the original result. Will be ",(0,a.kt)("code",null,"null")," when ",(0,a.kt)("code",null,"isNew")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.expected"},"expected")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererresult"},"BettererResult")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"The expected result for the test run. Will always reflect the result from the ",(0,a.kt)("a",{parentName:"td",href:"https://phenomnomnominal.github.io/betterer/docs/results-file"},"results file"),". If the ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterertest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererTest"))," gets better over the lifetime of the ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterercontext"},"BettererContext"),", ",(0,a.kt)("code",null,"expected")," will reflect the current result. Will be ",(0,a.kt)("code",null,"null")," when ",(0,a.kt)("code",null,"isNew")," is ",(0,a.kt)("code",null,"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.filepaths"},"filePaths")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererfilepaths"},"BettererFilePaths")," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"An array of file paths that will be tested. Will be ",(0,a.kt)("code",null,"null")," if the test is not a ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererfiletest"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest")),". If it is an empty array then all relevant files for the test (as defined by ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererfiletest.include"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest.include()"))," and ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererfiletest.exclude"},(0,a.kt)("inlineCode",{parentName:"a"},"BettererFileTest.exclude()")),") will be tested.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.isnew"},"isNew")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),", this is the first time that a test has been run. Both ",(0,a.kt)("code",null,"baseline")," and ",(0,a.kt)("code",null,"expected")," will be set to ",(0,a.kt)("code",null,"null"),". The default reporter will show that this test is new.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.isskipped"},"isSkipped")),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"When ",(0,a.kt)("code",null,"true"),", this test has been skipped and the test function will not run. The default reporter will show that this test has been skipped.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.bettererrun.name"},"name")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the test for the run.")))))}d.isMDXComponent=!0}}]);