"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7023],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>b});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},p=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),u=c(r),m=a,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(b,i(i({ref:e},p),{},{components:r})):n.createElement(b,i({ref:e},p))}));function b(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[u]="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},831:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={id:"constraints",title:"constraints",sidebar_label:"constraints",slug:"/constraints"},i=void 0,s={unversionedId:"api/constraints",id:"api/constraints",title:"constraints",description:"API &gt; @betterer/constraints",source:"@site/docs/api/constraints.md",sourceDirName:"api",slug:"/constraints",permalink:"/betterer/docs/constraints",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/constraints.md",tags:[],version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1636753986,formattedLastUpdatedAt:"Nov 12, 2021",frontMatter:{id:"constraints",title:"constraints",sidebar_label:"constraints",slug:"/constraints"}},l={},c=[{value:"Remarks",id:"remarks",level:2},{value:"Enumerations",id:"enumerations",level:2},{value:"Functions",id:"functions",level:2}],p={toc:c},u="wrapper";function d(t){let{components:e,...r}=t;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/betterer/docs/constraints"},"@betterer/constraints")),(0,a.kt)("p",null,"Constraint helpers for writing ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/phenomnomnominal/betterer"},(0,a.kt)("strong",{parentName:"a"},"Betterer"))," tests."),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"constraint")," function is responsible for comparing two ",(0,a.kt)("strong",{parentName:"p"},"Betterer")," test results and determining if the newer result is ",(0,a.kt)("inlineCode",{parentName:"p"},"better"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"worse")," or the ",(0,a.kt)("inlineCode",{parentName:"p"},"same"),"."),(0,a.kt)("h2",{id:"enumerations"},"Enumerations"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Enumeration"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/constraints.bettererconstraintresult"},"BettererConstraintResult")),(0,a.kt)("td",{parentName:"tr",align:null},"The return type of a ",(0,a.kt)("strong",{parentName:"td"},"Betterer")," constraint function. Used to indicate whether the new result is ",(0,a.kt)("code",null,"better"),", ",(0,a.kt)("code",null,"worse")," or the ",(0,a.kt)("code",null,"same")," than the expected result.")))),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/constraints.bigger"},"bigger(result, expected)")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Betterer")," ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterertestconstraint"},"constraint function")," for when a numeric result is expected to get bigger.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/constraints.smaller"},"smaller(result, expected)")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Betterer")," ",(0,a.kt)("a",{parentName:"td",href:"/betterer/docs/betterer.betterertestconstraint"},"constraint function")," for when a numeric result is expected to get smaller.")))))}d.isMDXComponent=!0}}]);