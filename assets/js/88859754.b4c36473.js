"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(n),k=r,c=m["".concat(p,".").concat(k)]||m[k]||s[k]||l;return n?a.createElement(c,i(i({ref:t},u),{},{components:n})):a.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),o=n(6550),p=n(1980),d=n(7392),u=n(12);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function s(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function k(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,p._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function N(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=s(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!k({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[p,d]=c({queryString:n,groupId:a}),[m,N]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=p??m;return k({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!k({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),N(e)}),[d,N,l]),tabValues:l}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:o,selectValue:p,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),s=e=>{const t=e.currentTarget,n=u.indexOf(t),a=d[n].value;a!==o&&(m(t),p(a))},k=e=>{let t=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:k,onClick:s},i,{className:(0,l.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=N(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},r.createElement(f,(0,a.Z)({},e,t)),r.createElement(h,(0,a.Z)({},e,t)))}function C(e){const t=(0,g.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},6208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>m});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={id:"running-betterer",title:"Running Betterer",sidebar_label:"Running Betterer",slug:"/running-betterer"},p=void 0,d={unversionedId:"running-betterer",id:"running-betterer",title:"Running Betterer",description:"You can run Betterer with the Betterer CLI. If you used npx @betterer/cli init to add Betterer to your project, @betterer/cli will already be added as a dependency, and there will be a betterer script in your package.json file.",source:"@site/docs/running-betterer.md",sourceDirName:".",slug:"/running-betterer",permalink:"/betterer/docs/running-betterer",draft:!1,editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/running-betterer.md",tags:[],version:"current",lastUpdatedBy:"Craig Spence",lastUpdatedAt:1636758494,formattedLastUpdatedAt:"Nov 12, 2021",frontMatter:{id:"running-betterer",title:"Running Betterer",sidebar_label:"Running Betterer",slug:"/running-betterer"},sidebar:"docs",previous:{title:"Installation",permalink:"/betterer/docs/installation"},next:{title:"Workflow",permalink:"/betterer/docs/workflow"}},u={},m=[{value:"Start mode",id:"start-mode",level:2},{value:"Including and excluding files",id:"including-and-excluding-files",level:3},{value:"Examples",id:"examples",level:4},{value:"Start options",id:"start-options",level:3},{value:"Read more about Start mode",id:"read-more-about-start-mode",level:4},{value:"CI mode",id:"ci-mode",level:2},{value:"CI options",id:"ci-options",level:3},{value:"Read more about CI mode",id:"read-more-about-ci-mode",level:4},{value:"Pre-commit mode",id:"pre-commit-mode",level:2},{value:"Pre-commit options",id:"pre-commit-options",level:3},{value:"Read more about Pre-commit mode",id:"read-more-about-pre-commit-mode",level:4},{value:"Watch mode",id:"watch-mode",level:2},{value:"Watch mode controls",id:"watch-mode-controls",level:3},{value:"Watch options",id:"watch-options",level:3},{value:"Ignoring files",id:"ignoring-files",level:3},{value:"Debug mode",id:"debug-mode",level:2}],s={toc:m},k="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," with the ",(0,r.kt)("strong",{parentName:"p"},"Betterer CLI"),". If you used ",(0,r.kt)("inlineCode",{parentName:"p"},"npx @betterer/cli init")," to add ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," to your project, ",(0,r.kt)("inlineCode",{parentName:"p"},"@betterer/cli")," will already be added as a dependency, and there will be a ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer")," script in your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file."),(0,r.kt)("h2",{id:"start-mode"},"Start mode"),(0,r.kt)("p",null,"If you just want to run your tests once (like before commiting your code), you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer start")," or just ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer"),":"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer start")," or just ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," once.")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer start")," or just ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," once."))),(0,r.kt)("div",{className:"video__container"},(0,r.kt)("video",{loop:!0,autoPlay:!0,muted:!0,width:"80%"},(0,r.kt)("source",{src:"/betterer/videos/start.mp4",type:"video/mp4"}))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Betterer")," will run your tests, compare the new results against the expected results, and report the updated status. If any test result is better, the ",(0,r.kt)("a",{parentName:"p",href:"./results-file"},(0,r.kt)("inlineCode",{parentName:"a"},".betterer.results"))," file will be updated with the new result \u2705! If it gets worse, your test will fail and ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," will throw an error \u274c!"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If it is your first time running a ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," test it will create a ",(0,r.kt)("a",{parentName:"p",href:"./results-file"},(0,r.kt)("inlineCode",{parentName:"a"},".betterer.results"))," file!")),(0,r.kt)("h3",{id:"including-and-excluding-files"},"Including and excluding files"),(0,r.kt)("p",null,"If you want to test specific files, you can pass a file path or ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/glob#glob-primer"},"glob")," directly to the ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," command."),(0,r.kt)("p",null,"If you include files with a generic glob and want to exclude a specific file, you can use the ",(0,r.kt)("a",{parentName:"p",href:"./running-betterer#start-options"},(0,r.kt)("inlineCode",{parentName:"a"},"--exclude"))," option, which can take multiple values. Each exclude pattern should be a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"},"regular expression"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'yarn betterer "src/**/*.js"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'yarn betterer "src/**/*.js" "src/**/*.css"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript and CSS files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'yarn betterer "src/**/*.js" "src/**/*.css" --exclude excluded.js')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript and CSS files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", but not any files called ",(0,r.kt)("inlineCode",{parentName:"p"},"excluded.js"),".")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'npm run betterer "src/**/*.js"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'npm run betterer "src/**/*.js" "src/**/*.css"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript and CSS files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'npm run betterer "src/**/*.js" "src/**/*.css" --exclude excluded.js')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," on all JavaScript and CSS files within ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", but not any files called ",(0,r.kt)("inlineCode",{parentName:"p"},"excluded.js"),"."))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Betterer")," will only run ",(0,r.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest"},"File Tests")," when targeting specific files.")),(0,r.kt)("h3",{id:"start-options"},"Start options"),(0,r.kt)("p",null,"You can pass the following options to ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cache")),(0,r.kt)("td",{parentName:"tr",align:null},"When present, Betterer will only run on changed files."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cachePath")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to Betterer cache file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.cache"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-c"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--config")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test definition file relative to CWD. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.ts"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--exclude")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"RegExp filter for files to exclude. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-f"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--filter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Select tests to run by RegExp. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-R"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--reporter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"npm package name or file path to a Betterer reporter. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"['@betterer/reporter']"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-r"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--results")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test results file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.results"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-s"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--silent")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable all default reporters. Custom reporters still work normally."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--strict")),(0,r.kt)("td",{parentName:"tr",align:null},'Hide the "how to update" message and set ',(0,r.kt)("inlineCode",{parentName:"td"},"--update")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-t"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--tsconfig")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to TypeScript config file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-u"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--update")),(0,r.kt)("td",{parentName:"tr",align:null},"Update the results file, even if things get worse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--workers")),(0,r.kt)("td",{parentName:"tr",align:null},"number of workers to use. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to run tests serially."),(0,r.kt)("td",{parentName:"tr",align:null},"Number of CPUs - 2")))),(0,r.kt)("h4",{id:"read-more-about-start-mode"},"Read more about Start mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./test-definition-file"},"The test definition file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./results-file"},"The results file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./betterer-and-typescript"},"Betterer and TypeScript")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./filters"},"Filters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./updating-results"},"Updating results")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./reporters"},"Reporters"))),(0,r.kt)("h2",{id:"ci-mode"},"CI mode"),(0,r.kt)("p",null,"When you run your tests on your CI server (like as part of a build review process), you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer ci"),":"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer ci")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in CI mode.")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer ci")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in CI mode."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Betterer")," will run your tests, compare the new results against the expected results, and report the updated status. If there is any difference between the new results and the expected results, then the committed ",(0,r.kt)("a",{parentName:"p",href:"./results-file"},"results file")," doesn't reflect the real state of the codebase, and ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," will throw an error \u274c."),(0,r.kt)("h3",{id:"ci-options"},"CI options"),(0,r.kt)("p",null,"You can pass the following options to ",(0,r.kt)("inlineCode",{parentName:"p"},"ci"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cache")),(0,r.kt)("td",{parentName:"tr",align:null},"When present, Betterer will only run on changed files."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cachePath")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to Betterer cache file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.cache"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-c"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--config")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test definition file relative to CWD. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.ts"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--exclude")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"RegExp filter for files to exclude. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-f"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--filter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Select tests to run by RegExp. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-R"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--reporter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"npm package name or file path to a Betterer reporter. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"['@betterer/reporter']"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-r"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--results")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test results file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.results"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-s"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--silent")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable all default reporters. Custom reporters still work normally."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-t"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--tsconfig")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to TypeScript config file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--workers")),(0,r.kt)("td",{parentName:"tr",align:null},"number of workers to use. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to run tests serially."),(0,r.kt)("td",{parentName:"tr",align:null},"Number of CPUs - 2")))),(0,r.kt)("h4",{id:"read-more-about-ci-mode"},"Read more about CI mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./workflow"},"Suggested workflow"))),(0,r.kt)("h2",{id:"pre-commit-mode"},"Pre-commit mode"),(0,r.kt)("p",null,"If you just want to run your tests in a pre-commit hook, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer precommit"),":"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer precommit")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in Pre-commit mode.")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer precommit")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in Pre-commit mode."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Betterer")," will run your tests, and if there is a change in the ",(0,r.kt)("a",{parentName:"p",href:"./results-file"},"results file")," then ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," will add it to the commit."),(0,r.kt)("h3",{id:"pre-commit-options"},"Pre-commit options"),(0,r.kt)("p",null,"You can pass the following options to ",(0,r.kt)("inlineCode",{parentName:"p"},"precommit"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cache")),(0,r.kt)("td",{parentName:"tr",align:null},"When present, Betterer will only run on changed files."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cachePath")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to Betterer cache file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.cache"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-c"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--config")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test definition file relative to CWD. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.ts"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--exclude")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"RegExp filter for files to exclude. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-f"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--filter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Select tests to run by RegExp. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-R"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--reporter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"npm package name or file path to a Betterer reporter. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"['@betterer/reporter']"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-r"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--results")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test results file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.results"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-s"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--silent")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable all default reporters. Custom reporters still work normally."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-t"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--tsconfig")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to TypeScript config file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--workers")),(0,r.kt)("td",{parentName:"tr",align:null},"number of workers to use. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to run tests serially."),(0,r.kt)("td",{parentName:"tr",align:null},"Number of CPUs - 2")))),(0,r.kt)("h4",{id:"read-more-about-pre-commit-mode"},"Read more about Pre-commit mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./workflow"},"Suggested workflow"))),(0,r.kt)("h2",{id:"watch-mode"},"Watch mode"),(0,r.kt)("p",null,"If you just want to run your tests each time your files change (like when working to fix a whole bunch of issues), you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"betterer watch"),":"),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer watch")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in watch mode.")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer watch")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," in watch mode."))),(0,r.kt)("div",{className:"video__container"},(0,r.kt)("video",{loop:!0,autoPlay:!0,muted:!0,width:"80%"},(0,r.kt)("source",{src:"/betterer/videos/watch.mp4",type:"video/mp4"}))),(0,r.kt)("h3",{id:"watch-mode-controls"},"Watch mode controls"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Press ",(0,r.kt)("inlineCode",{parentName:"li"},"q")," to quit"),(0,r.kt)("li",{parentName:"ul"},"Press ",(0,r.kt)("inlineCode",{parentName:"li"},"f")," to modify filters"),(0,r.kt)("li",{parentName:"ul"},"Press ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," to modify ignores")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Betterer")," will start watch mode, and wait for any files to change. When a file is saved, it will run any tests that apply to that file, compare the new results against the saved results, and report the updated status. When you quit watch mode (by pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"q"),"), the ",(0,r.kt)("a",{parentName:"p",href:"./results-file"},(0,r.kt)("inlineCode",{parentName:"a"},".betterer.results"))," file will be updated with the new results \u2705!"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"When running in watch mode, ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," will currently only run ",(0,r.kt)("a",{parentName:"p",href:"./betterer.bettererfiletest"},"File Tests"),". This might change in the future, so please raise an issue with your use case!")),(0,r.kt)("h3",{id:"watch-options"},"Watch options"),(0,r.kt)("p",null,"You can pass the following options to ",(0,r.kt)("inlineCode",{parentName:"p"},"watch"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cache")),(0,r.kt)("td",{parentName:"tr",align:null},"When present, Betterer will only run on changed files."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--cachePath")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to Betterer cache file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.cache"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-c"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--config")," ","[path]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test definition file relative to CWD. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.ts"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-f"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--filter")," ","[regexp]"),(0,r.kt)("td",{parentName:"tr",align:null},"Select tests to run by RegExp. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-i"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--ignore")," ","[glob]"),(0,r.kt)("td",{parentName:"tr",align:null},"Ignore files by Glob when running in watch mode. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-R"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--reporter")," ","[value]"),(0,r.kt)("td",{parentName:"tr",align:null},"npm package name or file path to a Betterer reporter. Takes multiple values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"['@betterer/reporter']"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-r"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--results")," ","[path]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to test results file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.results"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-s"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--silent")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable all default reporters. Custom reporters still work normally."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-t"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--tsconfig")," ","[path]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to TypeScript config file relative to CWD"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--workers")),(0,r.kt)("td",{parentName:"tr",align:null},"number of workers to use. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to run tests serially."),(0,r.kt)("td",{parentName:"tr",align:null},"Number of CPUs - 2")))),(0,r.kt)("h3",{id:"ignoring-files"},"Ignoring files"),(0,r.kt)("p",null,"If you want to ignore changes in certain files when running in ",(0,r.kt)("a",{parentName:"p",href:"./running-betterer#watch-mode-run-your-tests-when-files-change"},"Watch mode"),", you can use the ",(0,r.kt)("a",{parentName:"p",href:"./running-betterer#watch-options"},(0,r.kt)("inlineCode",{parentName:"a"},"--ignore"))," option, which can take multiple values. Each ignore pattern should be a ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/glob#glob-primer"},"glob"),"."),(0,r.kt)(l.Z,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn betterer watch --ignore **/*.js")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," with an ignore."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'yarn betterer watch --ignore "**/*.js" --ignore "**/*.css"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," with multiple ignores.")),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run betterer watch --ignore **/*.js")," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," with an ignore."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},'npm run betterer watch --ignore "**/*.js" --ignore "**/*.css"')," to run ",(0,r.kt)("strong",{parentName:"p"},"Betterer")," with multiple ignores."))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When running in ",(0,r.kt)("a",{parentName:"p",href:"./running-betterer#watch-mode-run-your-tests-when-files-change"},"Watch mode"),", ignores can be updated on the fly by first pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),", and then modifying the current ignore.")),(0,r.kt)("h2",{id:"debug-mode"},"Debug mode"),(0,r.kt)("p",null,"If something isn't working correctly, it can be useful for debugging purposes to get a debug log. You can pass the following options to any of the run commands:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-d"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--debug")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable debug mode. Also enables the ",(0,r.kt)("inlineCode",{parentName:"td"},"silent")," option to hide reporters output."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-l"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--debug-log")," ","[path]"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to the debug log file."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"./.betterer.log"))))))}c.isMDXComponent=!0}}]);